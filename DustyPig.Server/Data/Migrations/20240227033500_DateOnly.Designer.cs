// <auto-generated />
using System;
using DustyPig.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DustyPig.Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240227033500_DateOnly")]
    partial class DateOnly
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DustyPig.Server.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.AccountToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountTokens");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ActivationCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AccountId");

                    b.ToTable("ActivationCodes");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.AutoPlaylistSeries", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "MediaEntryId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("AutoPlaylistSeries");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.FCMToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("FCMTokens");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.FriendLibraryShare", b =>
                {
                    b.Property<int>("FriendshipId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("LibraryDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("FriendshipId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("FriendLibraryShares");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Account1Id")
                        .HasColumnType("int");

                    b.Property<int>("Account2Id")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DisplayName2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Account1Id");

                    b.HasIndex("Account2Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.GetRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TMDB_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("AccountId", "EntryType", "TMDB_Id")
                        .IsUnique();

                    b.ToTable("GetRequests");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.GetRequestSubscription", b =>
                {
                    b.Property<int>("GetRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("GetRequestId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("GetRequestSubscriptions");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTV")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "Name")
                        .IsUnique();

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CallSite")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Logger")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.MediaEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("ArtworkSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ArtworkUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<ulong>("BackdropSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("BackdropUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<ulong>("BifSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("BifUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("CreditsStartTime")
                        .HasColumnType("double");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<int?>("Episode")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraSortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Genre_Action")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Adventure")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Animation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Anime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Awards_Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Children")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Comedy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Crime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Documentary")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Drama")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Family")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Fantasy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Food")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Game_Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_History")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Home_and_Garden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Horror")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Indie")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Martial_Arts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Mini_Series")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Music")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Musical")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Mystery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_News")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Podcast")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Political")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Reality")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Romance")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Science_Fiction")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Soap")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Sports")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Suspense")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_TV_Movie")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Talk_Show")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Thriller")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Travel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_War")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Genre_Western")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<double?>("IntroEndTime")
                        .HasColumnType("double");

                    b.Property<double?>("IntroStartTime")
                        .HasColumnType("double");

                    b.Property<double?>("Length")
                        .HasColumnType("double");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int?>("LinkedToId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieRating")
                        .HasColumnType("int");

                    b.Property<double?>("Popularity")
                        .HasColumnType("double");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<string>("SortTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TMDB_EntryId")
                        .HasColumnType("int");

                    b.Property<int?>("TMDB_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TVRating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<ulong>("VideoSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<long?>("Xid")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Added");

                    b.HasIndex("EntryType");

                    b.HasIndex("Genre_Action");

                    b.HasIndex("Genre_Adventure");

                    b.HasIndex("Genre_Animation");

                    b.HasIndex("Genre_Anime");

                    b.HasIndex("Genre_Awards_Show");

                    b.HasIndex("Genre_Children");

                    b.HasIndex("Genre_Comedy");

                    b.HasIndex("Genre_Crime");

                    b.HasIndex("Genre_Documentary");

                    b.HasIndex("Genre_Drama");

                    b.HasIndex("Genre_Family");

                    b.HasIndex("Genre_Fantasy");

                    b.HasIndex("Genre_Food");

                    b.HasIndex("Genre_Game_Show");

                    b.HasIndex("Genre_History");

                    b.HasIndex("Genre_Home_and_Garden");

                    b.HasIndex("Genre_Horror");

                    b.HasIndex("Genre_Indie");

                    b.HasIndex("Genre_Martial_Arts");

                    b.HasIndex("Genre_Mini_Series");

                    b.HasIndex("Genre_Music");

                    b.HasIndex("Genre_Musical");

                    b.HasIndex("Genre_Mystery");

                    b.HasIndex("Genre_News");

                    b.HasIndex("Genre_Podcast");

                    b.HasIndex("Genre_Political");

                    b.HasIndex("Genre_Reality");

                    b.HasIndex("Genre_Romance");

                    b.HasIndex("Genre_Science_Fiction");

                    b.HasIndex("Genre_Soap");

                    b.HasIndex("Genre_Sports");

                    b.HasIndex("Genre_Suspense");

                    b.HasIndex("Genre_TV_Movie");

                    b.HasIndex("Genre_Talk_Show");

                    b.HasIndex("Genre_Thriller");

                    b.HasIndex("Genre_Travel");

                    b.HasIndex("Genre_War");

                    b.HasIndex("Genre_Western");

                    b.HasIndex("LibraryId");

                    b.HasIndex("LinkedToId");

                    b.HasIndex("MovieRating");

                    b.HasIndex("Popularity");

                    b.HasIndex("TMDB_EntryId");

                    b.HasIndex("TMDB_Id");

                    b.HasIndex("TVRating");

                    b.HasIndex("LibraryId", "EntryType", "TMDB_Id", "Hash")
                        .IsUnique();

                    b.ToTable("MediaEntries");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.MediaSearchBridge", b =>
                {
                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<int>("SearchTermId")
                        .HasColumnType("int");

                    b.HasKey("MediaEntryId", "SearchTermId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("SearchTermId");

                    b.ToTable("MediaSearchBridges");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FriendshipId")
                        .HasColumnType("int");

                    b.Property<int?>("GetRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TitleOverrideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendshipId");

                    b.HasIndex("GetRequestId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TitleOverrideId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("ArtworkSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("ArtworkUpdateNeeded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ArtworkUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CurrentItemId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentProgress")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileId", "Name")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.PlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxMovieRating")
                        .HasColumnType("int");

                    b.Property<int>("MaxTVRating")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<ushort?>("PinNumber")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("TitleRequestPermission")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId", "Name")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ProfileLibraryShare", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileLibraryShares");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ProfileMediaProgress", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<double>("Played")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("Xid")
                        .HasColumnType("bigint");

                    b.HasKey("ProfileId", "MediaEntryId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileMediaProgresses");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.S3ArtFileToDelete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("S3ArtFilesToDelete");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Term");

                    b.ToTable("SearchTerms");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Subscription", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId", "MediaEntryId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Subtitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("FileSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("MediaEntryId", "Name")
                        .IsUnique();

                    b.ToTable("Subtitles");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("BackdropSize")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("BackdropUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<int?>("MovieRating")
                        .HasColumnType("int");

                    b.Property<double>("Popularity")
                        .HasColumnType("double");

                    b.Property<int>("TMDB_Id")
                        .HasColumnType("int");

                    b.Property<int?>("TVRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaType");

                    b.HasIndex("TMDB_Id");

                    b.HasIndex("TMDB_Id", "MediaType")
                        .IsUnique();

                    b.ToTable("TMDB_Entries");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_EntryPersonBridge", b =>
                {
                    b.Property<int>("TMDB_EntryId")
                        .HasColumnType("int");

                    b.Property<int>("TMDB_PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("TMDB_EntryId", "TMDB_PersonId", "Role");

                    b.HasIndex("TMDB_EntryId");

                    b.HasIndex("TMDB_PersonId");

                    b.ToTable("TMDB_EntryPeopleBridges");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_Person", b =>
                {
                    b.Property<int>("TMDB_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TMDB_Id");

                    b.ToTable("TMDB_People");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TitleOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileId", "MediaEntryId")
                        .IsUnique();

                    b.ToTable("TitleOverrides");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.WatchlistItem", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProfileId", "MediaEntryId");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("WatchListItems");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.AccountToken", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account")
                        .WithMany("AccountTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ActivationCode", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.AutoPlaylistSeries", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany()
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.FCMToken", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("FCMTokens")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.FriendLibraryShare", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Friendship", "Friendship")
                        .WithMany("FriendLibraryShares")
                        .HasForeignKey("FriendshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Library", "Library")
                        .WithMany("FriendLibraryShares")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friendship");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Friendship", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account1")
                        .WithMany()
                        .HasForeignKey("Account1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("Account2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.GetRequest", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account")
                        .WithMany("GetRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", null)
                        .WithMany("GetRequests")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.GetRequestSubscription", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.GetRequest", "GetRequest")
                        .WithMany("NotificationSubscriptions")
                        .HasForeignKey("GetRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GetRequest");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Library", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account")
                        .WithMany("Libraries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.MediaEntry", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Library", "Library")
                        .WithMany("MediaEntries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "LinkedTo")
                        .WithMany()
                        .HasForeignKey("LinkedToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DustyPig.Server.Data.Models.TMDB_Entry", "TMDB_Entry")
                        .WithMany("MediaEntries")
                        .HasForeignKey("TMDB_EntryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Library");

                    b.Navigation("LinkedTo");

                    b.Navigation("TMDB_Entry");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.MediaSearchBridge", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("MediaSearchBridges")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.SearchTerm", "SearchTerm")
                        .WithMany("SearchTermBridges")
                        .HasForeignKey("SearchTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("SearchTerm");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Notification", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Friendship", "Friendship")
                        .WithMany()
                        .HasForeignKey("FriendshipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DustyPig.Server.Data.Models.GetRequest", "GetRequest")
                        .WithMany()
                        .HasForeignKey("GetRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany()
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("Notifications")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.TitleOverride", "TitleOverride")
                        .WithMany()
                        .HasForeignKey("TitleOverrideId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Friendship");

                    b.Navigation("GetRequest");

                    b.Navigation("MediaEntry");

                    b.Navigation("Profile");

                    b.Navigation("TitleOverride");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Playlist", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("Playlists")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.PlaylistItem", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Playlist", "Playlist")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Profile", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Account", "Account")
                        .WithMany("Profiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ProfileLibraryShare", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.Library", "Library")
                        .WithMany("ProfileLibraryShares")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("ProfileLibraryShares")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.ProfileMediaProgress", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("ProfileMediaProgress")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("ProfileMediaProgress")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Subscription", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Subtitle", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("Subtitles")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_EntryPersonBridge", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.TMDB_Entry", "TMDB_Entry")
                        .WithMany("People")
                        .HasForeignKey("TMDB_EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.TMDB_Person", "TMDB_Person")
                        .WithMany("TMDB_EntryBridges")
                        .HasForeignKey("TMDB_PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TMDB_Entry");

                    b.Navigation("TMDB_Person");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TitleOverride", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("TitleOverrides")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("TitleOverrides")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.WatchlistItem", b =>
                {
                    b.HasOne("DustyPig.Server.Data.Models.MediaEntry", "MediaEntry")
                        .WithMany("WatchlistItems")
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DustyPig.Server.Data.Models.Profile", "Profile")
                        .WithMany("WatchlistItems")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaEntry");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Account", b =>
                {
                    b.Navigation("AccountTokens");

                    b.Navigation("GetRequests");

                    b.Navigation("Libraries");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Friendship", b =>
                {
                    b.Navigation("FriendLibraryShares");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.GetRequest", b =>
                {
                    b.Navigation("NotificationSubscriptions");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Library", b =>
                {
                    b.Navigation("FriendLibraryShares");

                    b.Navigation("MediaEntries");

                    b.Navigation("ProfileLibraryShares");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.MediaEntry", b =>
                {
                    b.Navigation("MediaSearchBridges");

                    b.Navigation("PlaylistItems");

                    b.Navigation("ProfileMediaProgress");

                    b.Navigation("Subscriptions");

                    b.Navigation("Subtitles");

                    b.Navigation("TitleOverrides");

                    b.Navigation("WatchlistItems");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistItems");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.Profile", b =>
                {
                    b.Navigation("FCMTokens");

                    b.Navigation("GetRequests");

                    b.Navigation("Notifications");

                    b.Navigation("Playlists");

                    b.Navigation("ProfileLibraryShares");

                    b.Navigation("ProfileMediaProgress");

                    b.Navigation("Subscriptions");

                    b.Navigation("TitleOverrides");

                    b.Navigation("WatchlistItems");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.SearchTerm", b =>
                {
                    b.Navigation("SearchTermBridges");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_Entry", b =>
                {
                    b.Navigation("MediaEntries");

                    b.Navigation("People");
                });

            modelBuilder.Entity("DustyPig.Server.Data.Models.TMDB_Person", b =>
                {
                    b.Navigation("TMDB_EntryBridges");
                });
#pragma warning restore 612, 618
        }
    }
}
